<project name="clojure" default="all">

  <description>
    Build with "ant" and then start the
    REPL with: "java -cp clojure.jar clojure.main".
  </description>

  <property name="src" location="src"/>
  <property name="jsrc" location="${src}/jvm"/>
  <property name="cljsrc" location="${src}/clj"/>
  <property name="cljscript" location="${src}/script"/>
  <property name="compile-script" location="${cljscript}/bootstrap_compile.clj"/>
  <property name="target" location="target"/>
  <property name="build" location="${target}/classes"/>
  <property name="dist" location="dist"/>
  <property file="maven-classpath.properties"/>

  <!-- Get the version string out of the POM -->
  <xmlproperty file="pom.xml" prefix="pom"/>
  <property name="clojure.version.label" value="${pom.project.version}"/>
  <property name="version.properties" value="${build}/clojure/version.properties"/>

  <property name="clojure_jar" location="clojure-${clojure.version.label}.jar"/>
  <property name="clojure_noversion_jar" location="clojure.jar"/>

  <target name="init" depends="clean">
    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/clojure"/>
    <echo file="${version.properties}">version=${clojure.version.label}</echo>
  </target>

  <target name="compile-java" depends="init"
          description="Compile Java sources.">
    <javac srcdir="${jsrc}" destdir="${build}" includeJavaRuntime="yes"
           includeAntRuntime="false"
           debug="true" source="1.5" target="1.5"/>
  </target>

  <target name="compile-clojure"
          description="Compile Clojure sources.">
    <java classname="clojure.lang.Compile"
          classpath="${maven.compile.classpath}:${build}:${cljsrc}"
          failonerror="true"
          fork="true">
      <sysproperty key="clojure.compile.path" value="${build}"/>
         <!--<sysproperty key="clojure.compiler.elide-meta" value="[:doc :file :line :added]"/>-->
         <!--<sysproperty key="clojure.compiler.disable-locals-clearing" value="true"/>-->
      <!-- <sysproperty key="clojure.compile.warn-on-reflection" value="true"/> -->
      <arg value="clojure.core"/>
      <arg value="clojure.core.protocols"/>
      <arg value="clojure.main"/>
      <arg value="clojure.set"/>
      <arg value="clojure.edn"/>
      <arg value="clojure.xml"/>
      <arg value="clojure.zip"/>
      <arg value="clojure.inspector"/>
      <arg value="clojure.walk"/>
      <arg value="clojure.stacktrace"/>
      <arg value="clojure.template"/>
      <arg value="clojure.test.tap"/>
      <arg value="clojure.pprint"/>
      <arg value="clojure.java.io"/>
      <arg value="clojure.repl"/>
      <arg value="clojure.java.browse"/>
      <arg value="clojure.java.javadoc"/>
      <arg value="clojure.java.shell"/>
      <arg value="clojure.java.browse-ui"/>
      <arg value="clojure.string"/>
      <arg value="clojure.data"/>
      <arg value="clojure.reflect"/>
    </java>
  </target>


  <target name="build"
          description="Build Clojure (compilation only, no tests)."
          depends="compile-java, compile-clojure"/>

  <target name="jar" depends="build"
          description="Create clojure jar file.">
    <jar jarfile="${clojure_jar}" basedir="${build}">
      <fileset dir="${cljsrc}">
        <include name="**/*.clj"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="clojure.main"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
    <copy file="${clojure_jar}" tofile="${clojure_noversion_jar}"/>
  </target>
  
  <target name="all" depends="build,jar"/>

  <target name="clean"
          description="Remove autogenerated files and directories.">
    <delete dir="${target}"/>
    <delete verbose="true">
      <fileset dir="${basedir}" includes="*.jar"/>
      <fileset dir="${basedir}" includes="*.zip"/>
    </delete>
  </target>

</project>
